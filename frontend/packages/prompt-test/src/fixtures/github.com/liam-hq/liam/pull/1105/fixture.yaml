---
assert:
- type: javascript
  value: output.feedbacks.filter(feedback => feedback.severity === "POSITIVE").length > 0
- type: is-json
- type: cost
  threshold: 0.008

vars:
  '# ref': github.com/liam-hq/liam/pull/1105
  docsContent: ''
  schemaFiles:
  - filename: frontend/packages/db/schema/schema.sql
    content: |-
      
      
      SET statement_timeout = 0;
      SET lock_timeout = 0;
      SET idle_in_transaction_session_timeout = 0;
      SET client_encoding = 'UTF8';
      SET standard_conforming_strings = on;
      SELECT pg_catalog.set_config('search_path', '', false);
      SET check_function_bodies = false;
      SET xmloption = content;
      SET client_min_messages = warning;
      SET row_security = off;
      
      
      CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";
      
      
      
      
      
      
      CREATE EXTENSION IF NOT EXISTS "pgsodium";
      
      
      
      
      
      
      COMMENT ON SCHEMA "public" IS 'standard public schema';
      
      
      
      CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";
      
      
      
      
      
      
      CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";
      
      
      
      
      
      
      CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";
      
      
      
      
      
      
      CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";
      
      
      
      
      
      
      CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";
      
      
      
      
      
      
      CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";
      
      
      
      
      
      
      CREATE TYPE "public"."CategoryEnum" AS ENUM (
          'MIGRATION_SAFETY',
          'DATA_INTEGRITY',
          'PERFORMANCE_IMPACT',
          'PROJECT_RULES_CONSISTENCY',
          'SECURITY_OR_SCALABILITY'
      );
      
      
      ALTER TYPE "public"."CategoryEnum" OWNER TO "postgres";
      
      
      CREATE TYPE "public"."KnowledgeType" AS ENUM (
          'SCHEMA',
          'DOCS'
      );
      
      
      ALTER TYPE "public"."KnowledgeType" OWNER TO "postgres";
      
      
      CREATE TYPE "public"."SeverityEnum" AS ENUM (
          'CRITICAL',
          'WARNING',
          'POSITIVE',
          'QUESTION'
      );
      
      
      ALTER TYPE "public"."SeverityEnum" OWNER TO "postgres";
      
      SET default_tablespace = '';
      
      SET default_table_access_method = "heap";
      
      
      CREATE TABLE IF NOT EXISTS "public"."GitHubDocFilePath" (
          "id" integer NOT NULL,
          "path" "text" NOT NULL,
          "isReviewEnabled" boolean DEFAULT true NOT NULL,
          "projectId" integer NOT NULL,
          "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          "updatedAt" timestamp(3) without time zone NOT NULL
      );
      
      
      ALTER TABLE "public"."GitHubDocFilePath" OWNER TO "postgres";
      
      
      CREATE SEQUENCE IF NOT EXISTS "public"."GitHubDocFilePath_id_seq"
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;
      
      
      ALTER TABLE "public"."GitHubDocFilePath_id_seq" OWNER TO "postgres";
      
      
      ALTER SEQUENCE "public"."GitHubDocFilePath_id_seq" OWNED BY "public"."GitHubDocFilePath"."id";
      
      
      
      CREATE TABLE IF NOT EXISTS "public"."GitHubSchemaFilePath" (
          "id" integer NOT NULL,
          "path" "text" NOT NULL,
          "projectId" integer NOT NULL,
          "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          "updatedAt" timestamp(3) without time zone NOT NULL
      );
      
      
      ALTER TABLE "public"."GitHubSchemaFilePath" OWNER TO "postgres";
      
      
      CREATE SEQUENCE IF NOT EXISTS "public"."GitHubSchemaFilePath_id_seq"
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;
      
      
      ALTER TABLE "public"."GitHubSchemaFilePath_id_seq" OWNER TO "postgres";
      
      
      ALTER SEQUENCE "public"."GitHubSchemaFilePath_id_seq" OWNED BY "public"."GitHubSchemaFilePath"."id";
      
      
      
      CREATE TABLE IF NOT EXISTS "public"."KnowledgeSuggestion" (
          "id" integer NOT NULL,
          "type" "public"."KnowledgeType" NOT NULL,
          "title" "text" NOT NULL,
          "path" "text" NOT NULL,
          "content" "text" NOT NULL,
          "fileSha" "text",
          "projectId" integer NOT NULL,
          "approvedAt" timestamp(3) without time zone,
          "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          "updatedAt" timestamp(3) without time zone NOT NULL,
          "branchName" "text" NOT NULL,
          "traceId" "text"
      );
      
      
      ALTER TABLE "public"."KnowledgeSuggestion" OWNER TO "postgres";
      
      
      CREATE SEQUENCE IF NOT EXISTS "public"."KnowledgeSuggestion_id_seq"
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;
      
      
      ALTER TABLE "public"."KnowledgeSuggestion_id_seq" OWNER TO "postgres";
      
      
      ALTER SEQUENCE "public"."KnowledgeSuggestion_id_seq" OWNED BY "public"."KnowledgeSuggestion"."id";
      
      
      
      CREATE TABLE IF NOT EXISTS "public"."Migration" (
          "id" integer NOT NULL,
          "title" "text" NOT NULL,
          "pullRequestId" integer NOT NULL,
          "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          "updatedAt" timestamp(3) without time zone NOT NULL
      );
      
      
      ALTER TABLE "public"."Migration" OWNER TO "postgres";
      
      
      CREATE SEQUENCE IF NOT EXISTS "public"."Migration_id_seq"
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;
      
      
      ALTER TABLE "public"."Migration_id_seq" OWNER TO "postgres";
      
      
      ALTER SEQUENCE "public"."Migration_id_seq" OWNED BY "public"."Migration"."id";
      
      
      
      CREATE TABLE IF NOT EXISTS "public"."OverallReview" (
          "id" integer NOT NULL,
          "projectId" integer,
          "pullRequestId" integer NOT NULL,
          "reviewComment" "text",
          "reviewedAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          "updatedAt" timestamp(3) without time zone NOT NULL,
          "branchName" "text" NOT NULL,
          "traceId" "text"
      );
      
      
      ALTER TABLE "public"."OverallReview" OWNER TO "postgres";
      
      
      CREATE SEQUENCE IF NOT EXISTS "public"."OverallReview_id_seq"
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;
      
      
      ALTER TABLE "public"."OverallReview_id_seq" OWNER TO "postgres";
      
      
      ALTER SEQUENCE "public"."OverallReview_id_seq" OWNED BY "public"."OverallReview"."id";
      
      
      
      CREATE TABLE IF NOT EXISTS "public"."Project" (
          "id" integer NOT NULL,
          "name" "text" NOT NULL,
          "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          "updatedAt" timestamp(3) without time zone NOT NULL
      );
      
      
      ALTER TABLE "public"."Project" OWNER TO "postgres";
      
      
      CREATE TABLE IF NOT EXISTS "public"."ProjectRepositoryMapping" (
          "id" integer NOT NULL,
          "projectId" integer NOT NULL,
          "repositoryId" integer NOT NULL,
          "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          "updatedAt" timestamp(3) without time zone NOT NULL
      );
      
      
      ALTER TABLE "public"."ProjectRepositoryMapping" OWNER TO "postgres";
      
      
      CREATE SEQUENCE IF NOT EXISTS "public"."ProjectRepositoryMapping_id_seq"
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;
      
      
      ALTER TABLE "public"."ProjectRepositoryMapping_id_seq" OWNER TO "postgres";
      
      
      ALTER SEQUENCE "public"."ProjectRepositoryMapping_id_seq" OWNED BY "public"."ProjectRepositoryMapping"."id";
      
      
      
      CREATE SEQUENCE IF NOT EXISTS "public"."Project_id_seq"
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;
      
      
      ALTER TABLE "public"."Project_id_seq" OWNER TO "postgres";
      
      
      ALTER SEQUENCE "public"."Project_id_seq" OWNED BY "public"."Project"."id";
      
      
      
      CREATE TABLE IF NOT EXISTS "public"."PullRequest" (
          "id" integer NOT NULL,
          "pullNumber" bigint NOT NULL,
          "commentId" bigint,
          "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          "updatedAt" timestamp(3) without time zone NOT NULL,
          "repositoryId" integer NOT NULL
      );
      
      
      ALTER TABLE "public"."PullRequest" OWNER TO "postgres";
      
      
      CREATE SEQUENCE IF NOT EXISTS "public"."PullRequest_id_seq"
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;
      
      
      ALTER TABLE "public"."PullRequest_id_seq" OWNER TO "postgres";
      
      
      ALTER SEQUENCE "public"."PullRequest_id_seq" OWNED BY "public"."PullRequest"."id";
      
      
      
      CREATE TABLE IF NOT EXISTS "public"."Repository" (
          "id" integer NOT NULL,
          "name" "text" NOT NULL,
          "owner" "text" NOT NULL,
          "installationId" bigint NOT NULL,
          "isActive" boolean DEFAULT true NOT NULL,
          "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          "updatedAt" timestamp(3) without time zone NOT NULL
      );
      
      
      ALTER TABLE "public"."Repository" OWNER TO "postgres";
      
      
      CREATE SEQUENCE IF NOT EXISTS "public"."Repository_id_seq"
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;
      
      
      ALTER TABLE "public"."Repository_id_seq" OWNER TO "postgres";
      
      
      ALTER SEQUENCE "public"."Repository_id_seq" OWNED BY "public"."Repository"."id";
      
      
      
      CREATE TABLE IF NOT EXISTS "public"."ReviewIssue" (
          "id" integer NOT NULL,
          "overallReviewId" integer NOT NULL,
          "category" "public"."CategoryEnum" NOT NULL,
          "severity" "public"."SeverityEnum" NOT NULL,
          "description" "text" NOT NULL,
          "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
          "updatedAt" timestamp(3) without time zone NOT NULL,
          "suggestion" "text" NOT NULL
      );
      
      
      ALTER TABLE "public"."ReviewIssue" OWNER TO "postgres";
      
      
      CREATE SEQUENCE IF NOT EXISTS "public"."ReviewIssue_id_seq"
          START WITH 1
          INCREMENT BY 1
          NO MINVALUE
          NO MAXVALUE
          CACHE 1;
      
      
      ALTER TABLE "public"."ReviewIssue_id_seq" OWNER TO "postgres";
      
      
      ALTER SEQUENCE "public"."ReviewIssue_id_seq" OWNED BY "public"."ReviewIssue"."id";
      
      
      
      CREATE TABLE IF NOT EXISTS "public"."_prisma_migrations" (
          "id" character varying(36) NOT NULL,
          "checksum" character varying(64) NOT NULL,
          "finished_at" timestamp with time zone,
          "migration_name" character varying(255) NOT NULL,
          "logs" "text",
          "rolled_back_at" timestamp with time zone,
          "started_at" timestamp with time zone DEFAULT "now"() NOT NULL,
          "applied_steps_count" integer DEFAULT 0 NOT NULL
      );
      
      
      ALTER TABLE "public"."_prisma_migrations" OWNER TO "postgres";
      
      
      ALTER TABLE ONLY "public"."GitHubDocFilePath" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."GitHubDocFilePath_id_seq"'::"regclass");
      
      
      
      ALTER TABLE ONLY "public"."GitHubSchemaFilePath" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."GitHubSchemaFilePath_id_seq"'::"regclass");
      
      
      
      ALTER TABLE ONLY "public"."KnowledgeSuggestion" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."KnowledgeSuggestion_id_seq"'::"regclass");
      
      
      
      ALTER TABLE ONLY "public"."Migration" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."Migration_id_seq"'::"regclass");
      
      
      
      ALTER TABLE ONLY "public"."OverallReview" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."OverallReview_id_seq"'::"regclass");
      
      
      
      ALTER TABLE ONLY "public"."Project" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."Project_id_seq"'::"regclass");
      
      
      
      ALTER TABLE ONLY "public"."ProjectRepositoryMapping" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."ProjectRepositoryMapping_id_seq"'::"regclass");
      
      
      
      ALTER TABLE ONLY "public"."PullRequest" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."PullRequest_id_seq"'::"regclass");
      
      
      
      ALTER TABLE ONLY "public"."Repository" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."Repository_id_seq"'::"regclass");
      
      
      
      ALTER TABLE ONLY "public"."ReviewIssue" ALTER COLUMN "id" SET DEFAULT "nextval"('"public"."ReviewIssue_id_seq"'::"regclass");
      
      
      
      
      ALTER TABLE ONLY "public"."GitHubDocFilePath"
          ADD CONSTRAINT "GitHubDocFilePath_pkey" PRIMARY KEY ("id");
      
      
      
      ALTER TABLE ONLY "public"."GitHubSchemaFilePath"
          ADD CONSTRAINT "GitHubSchemaFilePath_path_projectId_key" UNIQUE ("path", "projectId");
      
      
      
      ALTER TABLE ONLY "public"."GitHubSchemaFilePath"
          ADD CONSTRAINT "GitHubSchemaFilePath_pkey" PRIMARY KEY ("id");
      
      
      
      ALTER TABLE ONLY "public"."KnowledgeSuggestion"
          ADD CONSTRAINT "KnowledgeSuggestion_pkey" PRIMARY KEY ("id");
      
      
      
      ALTER TABLE ONLY "public"."Migration"
          ADD CONSTRAINT "Migration_pkey" PRIMARY KEY ("id");
      
      
      
      ALTER TABLE ONLY "public"."OverallReview"
          ADD CONSTRAINT "OverallReview_pkey" PRIMARY KEY ("id");
      
      
      
      ALTER TABLE ONLY "public"."ProjectRepositoryMapping"
          ADD CONSTRAINT "ProjectRepositoryMapping_pkey" PRIMARY KEY ("id");
      
      
      
      ALTER TABLE ONLY "public"."Project"
          ADD CONSTRAINT "Project_pkey" PRIMARY KEY ("id");
      
      
      
      ALTER TABLE ONLY "public"."PullRequest"
          ADD CONSTRAINT "PullRequest_pkey" PRIMARY KEY ("id");
      
      
      
      ALTER TABLE ONLY "public"."Repository"
          ADD CONSTRAINT "Repository_pkey" PRIMARY KEY ("id");
      
      
      
      ALTER TABLE ONLY "public"."ReviewIssue"
          ADD CONSTRAINT "ReviewIssue_pkey" PRIMARY KEY ("id");
      
      
      
      ALTER TABLE ONLY "public"."_prisma_migrations"
          ADD CONSTRAINT "_prisma_migrations_pkey" PRIMARY KEY ("id");
      
      
      
      CREATE UNIQUE INDEX "GitHubDocFilePath_path_projectId_key" ON "public"."GitHubDocFilePath" USING "btree" ("path", "projectId");
      
      
      
      CREATE UNIQUE INDEX "Migration_pullRequestId_key" ON "public"."Migration" USING "btree" ("pullRequestId");
      
      
      
      CREATE UNIQUE INDEX "ProjectRepositoryMapping_projectId_repositoryId_key" ON "public"."ProjectRepositoryMapping" USING "btree" ("projectId", "repositoryId");
      
      
      
      CREATE UNIQUE INDEX "PullRequest_repositoryId_pullNumber_key" ON "public"."PullRequest" USING "btree" ("repositoryId", "pullNumber");
      
      
      
      CREATE UNIQUE INDEX "Repository_owner_name_key" ON "public"."Repository" USING "btree" ("owner", "name");
      
      
      
      ALTER TABLE ONLY "public"."GitHubDocFilePath"
          ADD CONSTRAINT "GitHubDocFilePath_projectId_fkey" FOREIGN KEY ("projectId") REFERENCES "public"."Project"("id") ON UPDATE CASCADE ON DELETE RESTRICT;
      
      
      
      ALTER TABLE ONLY "public"."GitHubSchemaFilePath"
          ADD CONSTRAINT "GitHubSchemaFilePath_projectId_fkey" FOREIGN KEY ("projectId") REFERENCES "public"."Project"("id") ON UPDATE CASCADE ON DELETE RESTRICT;
      
      
      
      ALTER TABLE ONLY "public"."KnowledgeSuggestion"
          ADD CONSTRAINT "KnowledgeSuggestion_projectId_fkey" FOREIGN KEY ("projectId") REFERENCES "public"."Project"("id") ON UPDATE CASCADE ON DELETE RESTRICT;
      
      
      
      ALTER TABLE ONLY "public"."Migration"
          ADD CONSTRAINT "Migration_pullRequestId_fkey" FOREIGN KEY ("pullRequestId") REFERENCES "public"."PullRequest"("id") ON UPDATE CASCADE ON DELETE RESTRICT;
      
      
      
      ALTER TABLE ONLY "public"."OverallReview"
          ADD CONSTRAINT "OverallReview_projectId_fkey" FOREIGN KEY ("projectId") REFERENCES "public"."Project"("id") ON UPDATE CASCADE ON DELETE SET NULL;
      
      
      
      ALTER TABLE ONLY "public"."OverallReview"
          ADD CONSTRAINT "OverallReview_pullRequestId_fkey" FOREIGN KEY ("pullRequestId") REFERENCES "public"."PullRequest"("id") ON UPDATE CASCADE ON DELETE RESTRICT;
      
      
      
      ALTER TABLE ONLY "public"."ProjectRepositoryMapping"
          ADD CONSTRAINT "ProjectRepositoryMapping_projectId_fkey" FOREIGN KEY ("projectId") REFERENCES "public"."Project"("id") ON UPDATE CASCADE ON DELETE RESTRICT;
      
      
      
      ALTER TABLE ONLY "public"."ProjectRepositoryMapping"
          ADD CONSTRAINT "ProjectRepositoryMapping_repositoryId_fkey" FOREIGN KEY ("repositoryId") REFERENCES "public"."Repository"("id") ON UPDATE CASCADE ON DELETE RESTRICT;
      
      
      
      ALTER TABLE ONLY "public"."PullRequest"
          ADD CONSTRAINT "PullRequest_repositoryId_fkey" FOREIGN KEY ("repositoryId") REFERENCES "public"."Repository"("id") ON UPDATE CASCADE ON DELETE RESTRICT;
      
      
      
      ALTER TABLE ONLY "public"."ReviewIssue"
          ADD CONSTRAINT "ReviewIssue_overallReviewId_fkey" FOREIGN KEY ("overallReviewId") REFERENCES "public"."OverallReview"("id") ON UPDATE CASCADE ON DELETE RESTRICT;
      
      
      
      ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";
      
      
      
      
      
      GRANT USAGE ON SCHEMA "public" TO "postgres";
      GRANT USAGE ON SCHEMA "public" TO "anon";
      GRANT USAGE ON SCHEMA "public" TO "authenticated";
      GRANT USAGE ON SCHEMA "public" TO "service_role";
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      GRANT ALL ON TABLE "public"."GitHubDocFilePath" TO "anon";
      GRANT ALL ON TABLE "public"."GitHubDocFilePath" TO "authenticated";
      GRANT ALL ON TABLE "public"."GitHubDocFilePath" TO "service_role";
      
      
      
      GRANT ALL ON SEQUENCE "public"."GitHubDocFilePath_id_seq" TO "anon";
      GRANT ALL ON SEQUENCE "public"."GitHubDocFilePath_id_seq" TO "authenticated";
      GRANT ALL ON SEQUENCE "public"."GitHubDocFilePath_id_seq" TO "service_role";
      
      
      
      GRANT ALL ON TABLE "public"."GitHubSchemaFilePath" TO "anon";
      GRANT ALL ON TABLE "public"."GitHubSchemaFilePath" TO "authenticated";
      GRANT ALL ON TABLE "public"."GitHubSchemaFilePath" TO "service_role";
      
      
      
      GRANT ALL ON SEQUENCE "public"."GitHubSchemaFilePath_id_seq" TO "anon";
      GRANT ALL ON SEQUENCE "public"."GitHubSchemaFilePath_id_seq" TO "authenticated";
      GRANT ALL ON SEQUENCE "public"."GitHubSchemaFilePath_id_seq" TO "service_role";
      
      
      
      GRANT ALL ON TABLE "public"."KnowledgeSuggestion" TO "anon";
      GRANT ALL ON TABLE "public"."KnowledgeSuggestion" TO "authenticated";
      GRANT ALL ON TABLE "public"."KnowledgeSuggestion" TO "service_role";
      
      
      
      GRANT ALL ON SEQUENCE "public"."KnowledgeSuggestion_id_seq" TO "anon";
      GRANT ALL ON SEQUENCE "public"."KnowledgeSuggestion_id_seq" TO "authenticated";
      GRANT ALL ON SEQUENCE "public"."KnowledgeSuggestion_id_seq" TO "service_role";
      
      
      
      GRANT ALL ON TABLE "public"."Migration" TO "anon";
      GRANT ALL ON TABLE "public"."Migration" TO "authenticated";
      GRANT ALL ON TABLE "public"."Migration" TO "service_role";
      
      
      
      GRANT ALL ON SEQUENCE "public"."Migration_id_seq" TO "anon";
      GRANT ALL ON SEQUENCE "public"."Migration_id_seq" TO "authenticated";
      GRANT ALL ON SEQUENCE "public"."Migration_id_seq" TO "service_role";
      
      
      
      GRANT ALL ON TABLE "public"."OverallReview" TO "anon";
      GRANT ALL ON TABLE "public"."OverallReview" TO "authenticated";
      GRANT ALL ON TABLE "public"."OverallReview" TO "service_role";
      
      
      
      GRANT ALL ON SEQUENCE "public"."OverallReview_id_seq" TO "anon";
      GRANT ALL ON SEQUENCE "public"."OverallReview_id_seq" TO "authenticated";
      GRANT ALL ON SEQUENCE "public"."OverallReview_id_seq" TO "service_role";
      
      
      
      GRANT ALL ON TABLE "public"."Project" TO "anon";
      GRANT ALL ON TABLE "public"."Project" TO "authenticated";
      GRANT ALL ON TABLE "public"."Project" TO "service_role";
      
      
      
      GRANT ALL ON TABLE "public"."ProjectRepositoryMapping" TO "anon";
      GRANT ALL ON TABLE "public"."ProjectRepositoryMapping" TO "authenticated";
      GRANT ALL ON TABLE "public"."ProjectRepositoryMapping" TO "service_role";
      
      
      
      GRANT ALL ON SEQUENCE "public"."ProjectRepositoryMapping_id_seq" TO "anon";
      GRANT ALL ON SEQUENCE "public"."ProjectRepositoryMapping_id_seq" TO "authenticated";
      GRANT ALL ON SEQUENCE "public"."ProjectRepositoryMapping_id_seq" TO "service_role";
      
      
      
      GRANT ALL ON SEQUENCE "public"."Project_id_seq" TO "anon";
      GRANT ALL ON SEQUENCE "public"."Project_id_seq" TO "authenticated";
      GRANT ALL ON SEQUENCE "public"."Project_id_seq" TO "service_role";
      
      
      
      GRANT ALL ON TABLE "public"."PullRequest" TO "anon";
      GRANT ALL ON TABLE "public"."PullRequest" TO "authenticated";
      GRANT ALL ON TABLE "public"."PullRequest" TO "service_role";
      
      
      
      GRANT ALL ON SEQUENCE "public"."PullRequest_id_seq" TO "anon";
      GRANT ALL ON SEQUENCE "public"."PullRequest_id_seq" TO "authenticated";
      GRANT ALL ON SEQUENCE "public"."PullRequest_id_seq" TO "service_role";
      
      
      
      GRANT ALL ON TABLE "public"."Repository" TO "anon";
      GRANT ALL ON TABLE "public"."Repository" TO "authenticated";
      GRANT ALL ON TABLE "public"."Repository" TO "service_role";
      
      
      
      GRANT ALL ON SEQUENCE "public"."Repository_id_seq" TO "anon";
      GRANT ALL ON SEQUENCE "public"."Repository_id_seq" TO "authenticated";
      GRANT ALL ON SEQUENCE "public"."Repository_id_seq" TO "service_role";
      
      
      
      GRANT ALL ON TABLE "public"."ReviewIssue" TO "anon";
      GRANT ALL ON TABLE "public"."ReviewIssue" TO "authenticated";
      GRANT ALL ON TABLE "public"."ReviewIssue" TO "service_role";
      
      
      
      GRANT ALL ON SEQUENCE "public"."ReviewIssue_id_seq" TO "anon";
      GRANT ALL ON SEQUENCE "public"."ReviewIssue_id_seq" TO "authenticated";
      GRANT ALL ON SEQUENCE "public"."ReviewIssue_id_seq" TO "service_role";
      
      
      
      ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
      ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
      ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
      ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";
      
      
      
      
      
      
      ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
      ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
      ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
      ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";
      
      
      
      
      
      
      ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
      ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
      ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
      ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      RESET ALL;
  fileChanges:
  - filename: frontend/apps/app/features/projects/actions/approveKnowledgeSuggestion.ts
    status: modified
    changes: 13
    patch: |-
      @@ -18,7 +18,6 @@ const formDataSchema = v.object({
       v.string(),
       v.transform((value) => Number(value)),
       ),
      - branch: v.string(),
       })
       
       export const approveKnowledgeSuggestion = async (formData: FormData) => {
      @@ -28,7 +27,6 @@ export const approveKnowledgeSuggestion = async (formData: FormData) => {
       repositoryOwner: formData.get('repositoryOwner'),
       repositoryName: formData.get('repositoryName'),
       installationId: formData.get('installationId'),
      - branch: formData.get('branch') ?? 'tmp-knowledge-suggestion',
       }
       
       const parsedData = v.safeParse(formDataSchema, formDataObject)
      @@ -37,13 +35,8 @@ export const approveKnowledgeSuggestion = async (formData: FormData) => {
       throw new Error(`Invalid form data: ${JSON.stringify(parsedData.issues)}`)
       }
       
      - const {
      - suggestionId,
      - repositoryOwner,
      - repositoryName,
      - installationId,
      - branch,
      - } = parsedData.output
      + const { suggestionId, repositoryOwner, repositoryName, installationId } =
      + parsedData.output
       
       try {
       // Get the knowledge suggestion
      @@ -66,7 +59,7 @@ export const approveKnowledgeSuggestion = async (formData: FormData) => {
       suggestion.fileSha,
       suggestion.title, // Use title as commit message
       installationId,
      - branch,
      + suggestion.branchName,
       )
       
       if (!success) {
  - filename: frontend/packages/db/prisma/migrations/20250328105323_add_branch_name_to_knowledge_suggestion/migration.sql
    status: added
    changes: 8
    patch: |-
      @@ -0,0 +1,8 @@
      +/*
      + Warnings:
      +
      + - Added the required column `branchName` to the `KnowledgeSuggestion` table without a default value. This is not possible if the table is not empty.
      +
      +*/
      +-- AlterTable
      +ALTER TABLE "KnowledgeSuggestion" ADD COLUMN "branchName" TEXT NOT NULL;
  - filename: frontend/packages/db/prisma/schema.prisma
    status: modified
    changes: 1
    patch: |-
      @@ -131,6 +131,7 @@ model KnowledgeSuggestion {
       path String // Target file path
       content String // Full content of the new file
       fileSha String // SHA of the file to be updated
      + branchName String // Branch name for GitHub operations
       projectId Int
       project Project @relation(fields: [projectId], references: [id])
       approvedAt DateTime? // Approval timestamp (null if not approved)
  - filename: frontend/packages/db/schema/schema.sql
    status: modified
    changes: 3
    patch: |-
      @@ -158,7 +158,8 @@ CREATE TABLE public."KnowledgeSuggestion" (
       "projectId" integer NOT NULL,
       "approvedAt" timestamp(3) without time zone,
       "createdAt" timestamp(3) without time zone DEFAULT CURRENT_TIMESTAMP NOT NULL,
      - "updatedAt" timestamp(3) without time zone NOT NULL
      + "updatedAt" timestamp(3) without time zone NOT NULL,
      + "branchName" text NOT NULL
       );
       
       
  - filename: frontend/packages/db/supabase/database.types.ts
    status: modified
    changes: 3
    patch: |-
      @@ -178,6 +178,7 @@ export type Database = {
       KnowledgeSuggestion: {
       Row: {
       approvedAt: string | null
      + branchName: string
       content: string
       createdAt: string
       fileSha: string
      @@ -190,6 +191,7 @@ export type Database = {
       }
       Insert: {
       approvedAt?: string | null
      + branchName: string
       content: string
       createdAt?: string
       fileSha: string
      @@ -202,6 +204,7 @@ export type Database = {
       }
       Update: {
       approvedAt?: string | null
      + branchName?: string
       content?: string
       createdAt?: string
       fileSha?: string
  - filename: frontend/packages/db/supabase/migrations/20250328105339_add_branch_name_to_knowledge_suggestion.sql
    status: added
    changes: 1
    patch: |-
      @@ -0,0 +1 @@
      +alter table "public"."KnowledgeSuggestion" add column "branchName" text not null;
  - filename: frontend/packages/github/src/api.server.ts
    status: modified
    changes: 2
    patch: |-
      @@ -181,7 +181,7 @@ export const updateFileContent = async (
       sha: string,
       message: string,
       installationId: number,
      - branch = 'tmp-knowledge-suggestion',
      + branch: string,
       ): Promise<boolean> => {
       const [owner, repo] = repositoryFullName.split('/')
       
  - filename: frontend/packages/jobs/src/functions/processCreateKnowledgeSuggestion.ts
    status: modified
    changes: 1
    patch: |-
      @@ -77,6 +77,7 @@ export const processCreateKnowledgeSuggestion = async (
       content,
       fileSha,
       projectId,
      + branchName: branch,
       },
       })
       
  - filename: memory-bank/progress.md
    status: modified
    changes: 3
    patch: |-
      @@ -11,6 +11,7 @@
       - Text document viewer page that renders raw text content from GitHub repositories.
       - Documentation list page that displays all GitHubDocFilePath entries for a project with links to individual document pages.
       - Supabase JS integration for database access in the document viewer page, with optimized queries using nested joins.
      +- Dynamic branch name management for KnowledgeSuggestion operations, replacing hardcoded branch names.
       
       ## What's Left to Build
       
      @@ -27,7 +28,7 @@ The project is currently focused on enhancing the Reviewer User experience, with
       
       The core review pipeline is now operational, connecting GitHub webhooks to AI-powered review generation and PR comment posting. This enables automatic review of database schema changes when pull requests are opened or updated.
       
      -The KnowledgeSuggestion feature is being implemented to allow AI-generated suggestions for Schema and Docs updates. The database model has been created, which will store suggestions that can be approved and then committed to GitHub using the GitHub API.
      +The KnowledgeSuggestion feature is being implemented to allow AI-generated suggestions for Schema and Docs updates. The database model has been created, which will store suggestions that can be approved and then committed to GitHub using the GitHub API. Recent improvements include adding a branchName column to the KnowledgeSuggestion table to replace hardcoded branch names with dynamic ones, making the system more flexible and maintainable.
       
       A new text document viewer page has been implemented at `/app/projects/[projectId]/docs/[branchOrCommit]/[...slug]` that fetches and displays raw text content from GitHub repositories. This page uses Supabase JS for database access instead of Prisma, demonstrating the flexibility of our data access layer. The implementation uses a single optimized query with nested joins to efficiently retrieve all necessary data. This serves as a prototype for the planned migration from Prisma to Supabase JS across the entire application.
     