---
assert:
- type: llm-rubric
  value: The report evaluates the **risk of data loss**.
- type: is-json
- type: javascript
  value: JSON.parse(output).scores[0].value >= 1
- type: cost
  threshold: 0.008

vars:
  ref: github.com/liam-hq/liam/pull/1055
  docsContent: ''
  schemaFiles:
  - filename: frontend/packages/db/prisma/schema.prisma
    content: |-
      datasource db {
        provider = "postgresql"
        // NOTE: Use the non-pooling URL to avoid PrismaClientUnknownRequestError for now
        url      = env("POSTGRES_URL_NON_POOLING")
      }

      generator client {
        provider      = "prisma-client-js"
        binaryTargets = ["native", "rhel-openssl-3.0.x", "debian-openssl-3.0.x"]
      }

      model Project {
        id        Int      @id @default(autoincrement())
        name      String
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
        reviews   OverallReview[]
        repositoryMappings ProjectRepositoryMapping[]
        watchSchemaFilePatterns WatchSchemaFilePattern[]
        knowledgeSuggestions KnowledgeSuggestion[]
        githubDocFilePaths GitHubDocFilePath[]
      }

      model Repository {
        id             Int      @id @default(autoincrement())
        name           String
        owner          String
        installationId BigInt
        isActive       Boolean  @default(true)
        createdAt      DateTime @default(now())
        updatedAt      DateTime @updatedAt

        pullRequests   PullRequest[]
        projectMappings ProjectRepositoryMapping[]

        @@unique([owner, name])
      }

      model PullRequest {
        id             Int      @id @default(autoincrement())
        pullNumber     BigInt
        commentId      BigInt?
        createdAt      DateTime @default(now())
        updatedAt      DateTime @updatedAt
        migration Migration?
        repositoryId   Int
        repository     Repository @relation(fields: [repositoryId], references: [id])
        reviews        OverallReview[]

        @@unique([repositoryId, pullNumber])
      }

      model Migration {
        id             Int         @id @default(autoincrement())
        title          String
        pullRequestId  Int         @unique
        pullRequest    PullRequest @relation(fields: [pullRequestId], references: [id])
        createdAt       DateTime  @default(now())
        updatedAt       DateTime  @updatedAt
      }

      model OverallReview {
        id            Int     @id @default(autoincrement())
        projectId     Int?
        project       Project?    @relation(fields: [projectId], references: [id])
        pullRequestId Int
        pullRequest   PullRequest @relation(fields: [pullRequestId], references: [id])
        branchName    String
        reviewComment String?
        reviewedAt    DateTime   @default(now())
        createdAt       DateTime  @default(now())
        updatedAt       DateTime  @updatedAt
      }

      model ProjectRepositoryMapping {
        id           Int        @id @default(autoincrement())
        projectId    Int
        project      Project    @relation(fields: [projectId], references: [id])
        repositoryId Int
        repository   Repository @relation(fields: [repositoryId], references: [id])
        createdAt    DateTime   @default(now())
        updatedAt    DateTime   @updatedAt

        @@unique([projectId, repositoryId])
      }

      model WatchSchemaFilePattern {
        id        Int      @id @default(autoincrement())
        pattern   String
        projectId Int
        project   Project  @relation(fields: [projectId], references: [id])
        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
      }


      enum KnowledgeType {
        SCHEMA
        DOCS
      }

      model KnowledgeSuggestion {
        id             Int           @id @default(autoincrement())
        type           KnowledgeType
        title          String
        path           String
        content        String
        fileSha        String?
        branchName     String
        projectId      Int
        project        Project       @relation(fields: [projectId], references: [id])
        approvedAt     DateTime?
        createdAt      DateTime      @default(now())
        updatedAt      DateTime      @updatedAt
      }
  schemaChanges:
  - filename: frontend/packages/db/prisma/schema.prisma
    status: modified
    changes: 12
    patch: |-
      @@ -113,15 +113,3 @@ model KnowledgeSuggestion {
         createdAt      DateTime      @default(now())
         updatedAt      DateTime      @updatedAt
       }
      -
      -model GitHubDocFilePath {
      -  id             Int      @id @default(autoincrement())
      -  path           String   // File path in GitHub repository
      -  isReviewEnabled Boolean @default(true)  // Whether ReviewAgent should read this file
      -  projectId      Int
      -  project        Project  @relation(fields: [projectId], references: [id])
      -  createdAt      DateTime @default(now())
      -  updatedAt      DateTime @updatedAt
      -
      -  @@unique([path, projectId])  // Composite unique key to ensure no duplicate paths within a project
      -}
