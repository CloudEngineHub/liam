import fs from 'node:fs'
import path from 'node:path'
import { Command } from 'commander'
import inquirer from 'inquirer'
import * as yocto from 'yoctocolors'

const initCommand = new Command('init').description(
  'guide you interactively through the setup',
)

const formatMap: Record<string, string> = {
  PostgreSQL: 'postgresql',
  'Ruby on Rails (schema.rb)': 'schemarb',
  Prisma: 'prisma',
  // Drizzle: 'drizzle',
}

initCommand.action(async () => {
  console.info(`
👾  Welcome to the @liam-hq/cli setup process! 👾

This \`init\` subcommand will guide you interactively through the setup.

${yocto.greenBright('🌟 This init command is a work in progress! 🌟')}
We’re continuously improving it. Don’t forget to run \`npx @liam-hq/cli init\` after updates for the latest features.

💡 Have feedback? Share it with us!  
Visit ${yocto.blueBright('https://github.com/liam-hq/liam/discussions')} to submit ideas or report issues.

🌟️ ${yocto.bold('Love Liam ERD')}? Help us grow by starring our GitHub repository:  
${yocto.blueBright('https://github.com/liam-hq/liam')}

----

Now, let’s get started with setting up your Liam ERD project.
  `)

  const answers = await inquirer.prompt([
    {
      type: 'list',
      name: 'dbOrOrm',
      message: 'Which Technology (database or ORM) are you using?',
      choices: [
        'PostgreSQL',
        'Ruby on Rails (schema.rb)',
        'Prisma (schema.prisma)',
        // 'Drizzle',
      ],
      default: 'PostgreSQL',
    },
    {
      type: 'confirm',
      name: 'canUsePgDump',
      message:
        'Can we use an .sql file generated by pg_dump? (Recommended: `pg_dump --schema-only`)',
      default: false,
      when: (prev) => prev.dbOrOrm === 'PostgreSQL',
    },
    {
      type: 'confirm',
      name: 'addGhActions',
      message: 'Generate GitHub Actions Workflow?',
      default: false,
    },
  ])

  const selectedFormat = formatMap[answers.dbOrOrm] || 'postgresql'

  console.info(`
For more details about Liam ERD usage and advanced configurations, check out:
${yocto.blueBright('https://liambx.com/docs')}
`)

  console.info('\n--- Output ---')
  console.info('\n--- Next Steps ---')

  console.info(
    '1) Build your ERD from a schema file (or from the dump.sql) using the following command:',
  )
  console.info(
    yocto.blueBright(
      `   $ npx @liam-hq/cli erd build --input <schemafile> --format ${selectedFormat}`,
    ),
  )

  console.info('\n2) Start your favorite httpd for serving dist. e.g.:')
  console.info(yocto.blueBright('   $ npx http-server dist'))

  if (answers.addGhActions) {
    const workflowContent = `name: ERD Build
on:
  push:
    branches: [ "main" ]

jobs:
  build-erd:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Generate ER Diagrams
        run: npx @liam-hq/cli erd build --input <schemafile> --format ${selectedFormat}
    
    # - Next step: Deploy ERD \`./dist\` to your preferred hosting service for easy sharing and access.
`

    const workflowDir = path.join(process.cwd(), '.github', 'workflows')
    const workflowPath = path.join(workflowDir, 'erd.yml')

    try {
      fs.mkdirSync(workflowDir, { recursive: true })
      fs.writeFileSync(workflowPath, workflowContent, 'utf-8')
      console.info(
        yocto.greenBright(
          `\n✔ Created GitHub Actions workflow at: ${workflowPath}\n`,
        ),
      )
    } catch (err) {
      console.error(
        yocto.redBright(
          `\nFailed to create GitHub Actions workflow file: ${err}\n`,
        ),
      )
    }
  }

  console.info(
    yocto.greenBright(`
✅ Setup complete! Enjoy using Liam ERD to visualize your database schema!`),
  )
})

export { initCommand }
